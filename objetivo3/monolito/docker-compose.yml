version: '3.8'

services:
  flaskapp:
    build: .
    restart: always
    env_file:
      - .env  # Carga las variables de entorno desde el archivo .env
    ports:
      - "80:80"
    depends_on:
      - db
    volumes:
      - /mnt/efs:/mnt/efs  # Monta el EFS en el contenedor
    networks:
      - bookstore_net
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker

  setup:
    image: python:3.10-slim
    depends_on:
      - db
    volumes:
      - .:/app
    working_dir: /app
    env_file:
      - .env
    entrypoint: >
      sh -c "
      apt-get update &&
      apt-get install -y nfs-common &&
      mkdir -p /mnt/efs &&
      mount -t nfs4 -o nfsvers=4.1 fs-015fb9d53f7395e8d.efs.us-east-1.amazonaws.com:/ /mnt/efs &&
      flask shell -c 'from extensions import db; db.create_all()'
      "
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  verifier:
    image: python:3.10-slim
    depends_on:
      - db
    volumes:
      - .:/app
    working_dir: /app
    env_file:
      - .env
    entrypoint: >
      sh -c "
      echo 'Verificando configuración de Docker Swarm...' &&
      docker info | grep 'Swarm: active' || (echo 'Swarm no está activo. Activando...' && docker swarm init) &&
      echo 'Verificando nodos del clúster...' &&
      docker node ls &&
      echo 'Verificando acceso a EFS...' &&
      apt-get update &&
      apt-get install -y nfs-common &&
      mkdir -p /mnt/efs &&
      mount -t nfs4 -o nfsvers=4.1 fs-015fb9d53f7395e8d.efs.us-east-1.amazonaws.com:/ /mnt/efs &&
      echo 'Configuración completada.'
      "
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

volumes:
  db_data:

networks:
  bookstore_net:
    driver: overlay

